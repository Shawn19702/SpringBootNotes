Apache Maven is a software project management tool that makes the software development process simpler and also unifies the development process.
Spring Initializr, is a web-based tool that's used to create Spring Boot projects.
@ComponetScan Enables Spring Boot component scan to find all the components in the application
@Configure defines a class that can be used as a source of bean definitions
The execution of the application starts from the main method, as in standard Java applications.
Logging can be used to monitor your application flow, and it is a good way to capture unexpected errors in your program code.
The logger.info method prints a logging message in the console
There are seven different levels of logging: TRACE, DEBUG, INFO, WARN, ERROR, FATAL, and OFF
If we set the logging level to DEBUG, we can see log messages from levels that are log level DEBUG or higher
If your port is occupied, your application won't start, and you will see the application failed to start message in the console

DI is a software development technique where we can create objects that depend on other
objects. DI helps with interaction between classes but at the same time keeps the classes
independent.

There are three types of classes in DI:
• A service is a class that can be used (this is the dependency).
• The client is a class that uses the dependency. (model)
• The injector passes the dependency (the service) to the dependent class (the client). (controller)

The service class can also be an abstract class; we can then use any implementation of thatin our client class and use mocks when testing.
Dependencies are passed to a client class constructor.
Dependencies are provided through setters. The following example code shows an example of the setter injection.
Spring Boot scans your application classes and registers classes with certain annotations
(@Service, @Repository, and @Controller) as Spring beans. These beans can then be injected using an @Autowired annotation
Java also provides an @Resource annotation that can be used to inject resources
An entity class is a simple Java class that is annotated with JPA's @Entity annotation. Entity classes use the standard JavaBean naming convention and have proper getter and setter methods.
JPA creates a database table called by the name of the class when the application is initialized
If you want to use some other name for the database table, you can use  the @Table annotation in your entity class.
The entity class must contain a unique ID that is used as a primary key in the database
The primary key is defined by using the @Id annotation. The @GeneratedValue annotation defines that the ID is automatically generated by the database.
If you want to use some other naming convention, you can use the @Column annotation.
We don't need an ID field in constructors due to automatic ID generation.
We can see the table creation statements in the console when running the application
When we have injected the repository class, we can use the CRUD methods it provides in the run method
You can  define your queries in the Spring Data repositories. The query must start with a prefix; for example, findBy.
There can be multiple fields after the By keyword, concatenated with the And and or keywords
Queries can be sorted by using the OrderBy keyword in the query method
You can create queries by using SQL statements via the @Query annotation.
With the @Query annotation, you can use more advanced expressions.
Spring Data JPA also provides PagingAndSortingRepository, which extends CrudRepository. This offers methods to fetch entities using pagination and sorting.
@One to many annotation means one Entity can have many but not the other way around. For example one owner can own multiple cars, but a car can only have one owner.
The cascade attribute defines how cascading affects the entities in the case of deletions or updates.
he cascade ALL attribute setting means that all operations are cascaded. For example, if the owner is deleted, the cars that are linked to that owner are deleted as well.
The mappedBy="owner" attribute setting tells us that the Car class has the owner field, which is the foreign key for this relationship.
Many-to-many relationship means many rows in a table are mapped to many rows in the other table. For example that an owner can have multiple cars and a car can have multiple owners. You would use the @ManyToMany annotation to apply this.
In a many-to-many relationship, it is recommended that you use Set instead of List with Hibernate.
Representational State Transfer (REST) is an architectural style for creating web services.
In Spring Boot, all HTTP requests are handled by controller classes.
@RequestMapping annotation, defines the endpoint that the method is mapped to.
The HAL format provides a set of conventions for expressing hyperlinks in JSON and it makes your RESTful web service easier to use for frontend developers
If you want to use different path naming, you can use the @RepositoryRestResouce annotation in your repository class
Query parameters are annotated with the @Param annotation.
The@Configuration and @EnableWebSecurity annotations switch off the default web security configuration, and we can define our own configuration in this class.
In our security configuration class, we have to define that Spring Security should use users from the database instead of in-memory users.
We should never save the password as plain text to the database. Therefore, we should define a password hashing algorithm.
You can find bcrypt calculators or generators from the internet if you type plain text password and
We can also use Postman and basic authentication
After successful authentication, the requests sent by the client should always contain the JWT that was received in the authentication
The getToken method that handles the login functionality
Spring Security's configure method defines which paths are secured and which are not secured. In the authentication process, we are using filters that allow us to perform some operations before a request goes to the controller or before   a response is sent to a client
You can implement IO exceptions in the AuthEntryPoint when the user types the wrong password
The CORS filter intercepts requests, and if these are identified as cross-origin, it adds proper headers to the request.
You can use @DisplayName annotation to give a more descriptive name to your test case
If you are going to use your own server, the easiest way to deploy the Spring Boot application is to use an executable Java ARchive (JAR) file
You can build your project using the mvn clean install command
You have to the change the database connection definition in the application.properties file to the values from the JawsDB Connection Info page
You can also connect to the JawsDB database using HeidiSQL.
You use AWS Amplify to deploy frontend
Docker is a container platform that makes software development, deployment, and shipping easier.
Containers are lightweight and executable software packages that include everything that is needed to run software
You can test that the build has executed correctly by running the JAR file with the following command: java -jar .\cardatabase-0.0.1-SNAPSHOT.jar
With the -t argument, we can give a name to our container
You can check that a new mariadb container exists by typing the docker image ls command
docker run –name cardb -e MYSQL_ROOT_PASSWORD=your_pwd –e MYSQL_DATABASE=cardb mariadb command sets the root user password and creates a new database


